//*****************************************************************************
//** 2418. Sort the People leetcode                                          **
//** This was generated by chatGPT, it was faster than my code. -Dan         **
//*****************************************************************************


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
// Define a structure to hold name and height together
typedef struct {
    char* name;
    int height;
} Person;

// Comparison function to be used with qsort
int comp(const void* a, const void* b) {
    Person* personA = (Person*)a;
    Person* personB = (Person*)b;
    // Sort in descending order of height
    return personB->height - personA->height;
}

char** sortPeople(char** names, int namesSize, int* heights, int heightsSize, int* returnSize) {
    // Create an array of Person structures
    Person* people = (Person*)malloc(namesSize * sizeof(Person));
    for (int i = 0; i < namesSize; i++) {
        people[i].name = names[i];
        people[i].height = heights[i];
    }

    // Sort the people array by height using qsort
    qsort(people, namesSize, sizeof(Person), comp);

    // Allocate memory for the sorted names array
    char** sortedNames = (char**)malloc(namesSize * sizeof(char*));
    for (int i = 0; i < namesSize; i++) {
        sortedNames[i] = people[i].name;
    }

    // Free the temporary people array
    free(people);

    // Set the return size
    *returnSize = namesSize;

    // Return the sorted names array
    return sortedNames;
}